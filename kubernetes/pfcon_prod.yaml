apiVersion: v1
kind: Service
metadata:
  name: pfcon
  labels:
    app: pfcon
    env: production
spec:
  type: NodePort
  selector:
    app: pfcon
    env: production
  ports:
    - port: 30005
      targetPort: 30005
      nodePort: 30005

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pfcon
  labels:
    app: pfcon
    env: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pfcon
      env: production
  template:
    metadata:
      name: pfcon
      labels:
        app: pfcon
        env: production
    spec:
      containers:
        - image: fnndsc/pfcon
          name: pfcon
          ports:
            - containerPort: 30005
          envFrom:
            - configMapRef:
                name: pfcon-config
          command: ["gunicorn"]
          args: ["-w", "5", "-b", "0.0.0.0:30005", "-t",  "200", "pfcon.wsgi:application"]
          volumeMounts:
            - mountPath: "/home/localuser/storeBase"
              name: "store-base"
      # We need to mount a physical dir in the HOST onto the key store in pfcon. This dir
      # is given by the STOREBASE env variable substitution.
      volumes:
        - name: "store-base"
          hostPath:
            path: ${STOREBASE}

---

apiVersion: v1
kind: Service
metadata:
  name: pman
  labels:
    app: pman
    env: production
spec:
  selector:
    app: pman
    env: production
  ports:
    - port: 5010
      targetPort: 5010

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pman
  labels:
    app: pman
    env: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pman
      env: production
  template:
    metadata:
      name: pman
      labels:
        app: pman
        env: production
    spec:
      containers:
        - image: fnndsc/pman
          name: pman
          ports:
            - containerPort: 5010
          # Since pman spins off containers of its own it needs to mount storeBase dir
          # (where pfcon shares the data) into the spawned container. This directory is
          # passed in the STOREBASE env variable.
          env:
            - name: STOREBASE
              value: ${STOREBASE}
            - name: CONTAINER_ENV
              value: kubernetes
          envFrom:
            - configMapRef:
                name: pman-config
